// Realice una soluciÃ³n concurrente de grano grueso (utilizando <> y/o <await B; S>) para el 
// siguiente problema. Un sistema operativo mantiene 5 instancias de un recurso almacenadas 
// en una cola, cuando un proceso necesita usar una instancia del recurso la saca de la cola, la 
// usa y cuando termina de usarla la vuelve a depositar.







int N = 5;

queue q [N]; int cant_recursos_en_uso = 0; 

process instancia[id: 0..N-1]{ //cantidad de procesos concurrentes || Cada uno de ellos ejecuta el cÃ³digo dentro del while (true), pero en momentos diferentes segÃºn la disponibilidad del recurso.
    while (true) { //representa que los procesos estÃ¡n continuamente solicitando y devolviendo recursos.
        <await (cant_recursos_en_uso < N); 
        cant_recursos_en_uso = cant_recursos_en_uso + 1; //decremento en 1 mis recursos disponibles>
        int recurso = q.pop();>
        
        usando_recurso(recurso); //fn que utiliza el recurso "imprimiendo"

        <q.push(recurso);
        cant_recursos_en_uso = cant_recursos_en_uso - 1;> //vuelvo a recuperar mi recurso ocupado
    }
}




//explicacion de ejercicio 

// 1. InterpretaciÃ³n del enunciado
// El enunciado dice que:
// âœ… Hay 5 instancias de un recurso almacenadas en una cola.
// âœ… Cuando un proceso necesita usar una instancia, la saca de la cola.
// âœ… Cuando termina de usarla, la vuelve a depositar en la cola.

// ðŸ“Œ Punto clave:
// El enunciado no menciona explÃ­citamente una variable cant, pero implÃ­citamente sugiere que nunca puede haber mÃ¡s de 5 procesos usando un recurso a la vez, ya que solo hay 5 recursos disponibles.

// 2. Â¿QuÃ© representa cant en la soluciÃ³n?
// La variable cant en el cÃ³digo lleva la cuenta de cuÃ¡ntos recursos estÃ¡n en uso.

// cant < 5 â†’ Significa que hay al menos un recurso disponible en la cola.
// cant++ â†’ Significa que un proceso ha tomado un recurso.
// cant-- â†’ Significa que un proceso ha devuelto un recurso.
// ðŸ“Œ Ejemplo visual:

// plaintext
// Copy
// Edit
// Tiempo 0:  5 recursos en la cola
// Tiempo 1:  Proceso A saca 1 recurso (cant = 1)
// Tiempo 2:  Proceso B saca 1 recurso (cant = 2)
// Tiempo 3:  Proceso C saca 1 recurso (cant = 3)
// Tiempo 4:  Proceso D saca 1 recurso (cant = 4)
// Tiempo 5:  Proceso E saca 1 recurso (cant = 5)  <-- Ya no quedan mÃ¡s
// Tiempo 6:  Proceso F intenta sacar un recurso pero espera (cant = 5)
// Tiempo 7:  Proceso A devuelve el recurso (cant = 4), ahora F puede continuar
// ðŸ›‘ Sin await (cant < 5)
// Si no controlamos la cantidad de recursos en uso, mÃ¡s de 5 procesos podrÃ­an intentar sacar recursos al mismo tiempo, lo que es incorrecto.

// 3. Â¿Es cant realmente necesaria?
// Podemos eliminar cant y controlar el acceso simplemente verificando si la cola estÃ¡ vacÃ­a o no, porque la cola ya impone una restricciÃ³n de 5 recursos.

// CÃ³digo sin cant
// c
// Copy
// Edit
// colaRecurso c[5]; // La cola contiene 5 recursos inicialmente.

// process pSo[id: 0..N-1]{
//     Recurso recurso;
//     while (true){
//         <await (!c.empty()); // Espera hasta que haya un recurso disponible
//         recurso = c.pop(); >  // Saca un recurso de la cola

//         // Usa recurso

//         <c.push(recurso); >  // Devuelve el recurso
//     }
// }
// Ventajas de esta versiÃ³n
// âœ… No necesitamos una variable extra (cant).
// âœ… Controlamos el acceso directamente con la estructura de la cola (c.empty()).
// âœ… El cÃ³digo es mÃ¡s claro y mÃ¡s cercano al enunciado.

// ConclusiÃ³n
// ðŸ“Œ La variable cant no es estrictamente necesaria porque el control de acceso ya lo hace la cola.
// ðŸ“Œ La mejor soluciÃ³n es la Ãºltima, donde usamos await (!c.empty()) en lugar de await (cant < 5).
// ðŸ“Œ La cola ya limita la cantidad de procesos concurrentes al nÃºmero de recursos disponibles.

// ðŸ”¥ Resumen final:
// ðŸ’¡ La cola c por sÃ­ sola es suficiente para resolver el problema sin necesidad de cant. ðŸš€




//glosario

//tipo T 
int N = 5
int queue[N]
process instancia[id: 0..N-1]{
		<int recurso = queue.pop()>
		// uso el recurso
		usando_recurso(recurso);
		// fin de uso del recurso
		<queue.push(recurso)>
}




// 1. Â¿QuÃ© significa while (true)?
// while (true) es un bucle infinito.
// Significa que el proceso se ejecutarÃ¡ indefinidamente, hasta que el sistema lo termine o lo suspenda.
// En este caso, representa que los procesos estÃ¡n continuamente solicitando y devolviendo recursos.
//======================================================================
// 2. Â¿QuÃ© significa id: 0..N-1?
// Define varios procesos con identificadores (id).
// id varÃ­a de 0 a N-1, lo que significa que hay N procesos en total.
// ðŸ“Œ Ejemplo:
// Si N = 3, entonces hay tres procesos:

// pSo[0], pSo[1], pSo[2].
// Cada uno de ellos ejecuta el cÃ³digo dentro del while (true), pero en momentos diferentes segÃºn

//======================================================================

// RESUMEN
// while (true): representa que los procesos estÃ¡n continuamente solicitando y devolviendo recursos..
// id: 0..N-1: Hay N procesos concurrentes, cada uno con su propio identificador.